{
  "author": {
    "name": "Felix Geisend√∂rfer",
    "email": "felix@debuggable.com",
    "url": "http://debuggable.com/"
  },
  "name": "sandboxed-module",
  "description": "A sandboxed Node.js module loader that lets you inject dependencies into your modules.",
  "keywords": [
    "require",
    "mocking",
    "mocks",
    "stubs",
    "dependency injection",
    "testing"
  ],
  "license": "MIT",
  "version": "0.2.0",
  "homepage": "https://github.com/felixge/node-sandboxed-module",
  "repository": {
    "type": "git",
    "url": "git://github.com/felixge/node-sandboxed-module.git"
  },
  "bugs": {
    "url": "http://github.com/felixge/node-sandboxed-module/issues"
  },
  "main": "./lib/sandboxed_module",
  "scripts": {
    "test": "node test/run"
  },
  "dependencies": {
    "require-like": "0.1.2",
    "stack-trace": "0.0.6"
  },
  "devDependencies": {
    "urun": "0.0.6",
    "coffee-script": "1.x"
  },
  "readme": "# sandboxed-module\n\n[![Build Status](https://secure.travis-ci.org/felixge/node-sandboxed-module.png)](http://travis-ci.org/felixge/node-sandboxed-module)\n\nA sandboxed node.js module loader that lets you inject dependencies into your\nmodules.\n\n## Installation\n\n``` bash\nnpm install sandboxed-module\n```\n\n## Usage\n\n``` javascript\nvar SandboxedModule = require('sandboxed-module');\nvar user = SandboxedModule.require('./user', {\n  requires: {'mysql': {fake: 'mysql module'}},\n  globals: {myGlobal: 'variable'},\n  locals: {myLocal: 'other variable'},\n});\n```\n\n## What to do with this\n\nThis module is intended to ease dependency injection for unit testing. However,\nfeel free to use it for whatever crimes you can think of.\n\n## API\n\n### SandboxedModule.load(moduleId, [options])\n\nReturns a new `SandboxedModule` where `moduleId` is a regular module path / id\nas you would normally pass into `require()`. The new module will be loaded in\nits own v8 context, but otherwise have access to the normal node.js\nenvironment.\n\n`options` is an optional object that can be used to inject any of the\nfollowing:\n\n* `requires:` An object containing `moduleId`s and the values to inject for\n  them when required by the sandboxed module. This does not affect children\n  of the sandboxed module.\n* `globals:` An object of global variables to inject into the sandboxed module.\n* `locals:` An object of local variables to inject into the sandboxed module.\n\n### SandboxedModule.require(moduleId, [options])\n\nIdentical to `SandboxedModule.load()`, but returns `sandboxedModule.exports`\ndirectly.\n\n### sandboxedModule.filename\n\nThe full path to the module.\n\n### sandboxedModule.module\n\nThe underlaying node.js `Module` instance.\n\n### sandboxedModule.exports\n\nA getter returning the `sandboxedModule.module.exports` object.\n\n### sandboxedModule.globals\n\nThe global object of the v8 context this module was loaded in. Modifications\nto this object will be reflected in the sandboxed module.\n\n### sandboxedModule.locals\n\nThe local variables injected into the sandboxed module using a closure.\nModifying this object has no effect on the state of the sandbox.\n\n### sandboxedModule.required\n\nAn object holding a list of all module required by the sandboxed module itself.\nThe keys are the `moduleId`s used for the require calls.\n\n### sandboxedModule.getGlobalLeaks()\n\nReturns an array of variable names that have leaked into the global scope,\nexcept those those that are part of the node environment, or have been injected\nusing the `globals:` option.\n\n## License\n\nsandboxed-module is licensed under the MIT license.\n",
  "readmeFilename": "Readme.md",
  "_id": "sandboxed-module@0.2.0",
  "dist": {
    "shasum": "4537ac0b9e70906f26a84dfefeb44389143e78c7"
  },
  "_from": "sandboxed-module@*",
  "_resolved": "https://registry.npmjs.org/sandboxed-module/-/sandboxed-module-0.2.0.tgz"
}
